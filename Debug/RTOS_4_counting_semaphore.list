
RTOS_4_counting_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005494  08005494  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800549c  0800549c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080054a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004070  2000001c  080054c0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000408c  080054c0  0002408c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001346c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8f  00000000  00000000  000334b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002242e  00000000  00000000  00037fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e74  00000000  00000000  0005a3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a3c  00000000  00000000  0006c242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013dc7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  0013dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800523c 	.word	0x0800523c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800523c 	.word	0x0800523c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000038 	.word	0x20000038
 8000508:	2000008c 	.word	0x2000008c

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fcfd 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f86f 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f901 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8d5 	bl	80006cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	4923      	ldr	r1, [pc, #140]	; (80005b4 <main+0xa8>)
 8000526:	4824      	ldr	r0, [pc, #144]	; (80005b8 <main+0xac>)
 8000528:	f002 f877 	bl	800261a <HAL_UART_Receive_IT>

  CountingSem = xSemaphoreCreateCounting(3,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2003      	movs	r0, #3
 8000530:	f002 ff71 	bl	8003416 <xQueueCreateCountingSemaphore>
 8000534:	4603      	mov	r3, r0
 8000536:	4a21      	ldr	r2, [pc, #132]	; (80005bc <main+0xb0>)
 8000538:	6013      	str	r3, [r2, #0]
  if(CountingSem == NULL) HAL_UART_Transmit(&huart2,(uint8_t *) "Unable to Create Semaphore\n\n",28,100);
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xb0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d106      	bne.n	8000550 <main+0x44>
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	221c      	movs	r2, #28
 8000546:	491e      	ldr	r1, [pc, #120]	; (80005c0 <main+0xb4>)
 8000548:	481b      	ldr	r0, [pc, #108]	; (80005b8 <main+0xac>)
 800054a:	f001 ffd4 	bl	80024f6 <HAL_UART_Transmit>
 800054e:	e006      	b.n	800055e <main+0x52>
  else HAL_UART_Transmit(&huart2, (uint8_t *) "Counting Semaphore created successfully\n\n", 41, 1000);
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	2229      	movs	r2, #41	; 0x29
 8000556:	491b      	ldr	r1, [pc, #108]	; (80005c4 <main+0xb8>)
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xac>)
 800055a:	f001 ffcc 	bl	80024f6 <HAL_UART_Transmit>

  // Create tasks
  xTaskCreate(HPT_TASK, "HPT", 128, NULL, 3 , &HPThandler);
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <main+0xbc>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2303      	movs	r3, #3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	4918      	ldr	r1, [pc, #96]	; (80005cc <main+0xc0>)
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0xc4>)
 800056e:	f003 f9fc 	bl	800396a <xTaskCreate>
  xTaskCreate(MPT_TASK, "MPT", 128, NULL, 2 , &MPThandler);
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <main+0xc8>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2302      	movs	r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	4916      	ldr	r1, [pc, #88]	; (80005d8 <main+0xcc>)
 8000580:	4816      	ldr	r0, [pc, #88]	; (80005dc <main+0xd0>)
 8000582:	f003 f9f2 	bl	800396a <xTaskCreate>
  xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1 , &LPThandler);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xd4>)
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0xd8>)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0xdc>)
 8000596:	f003 f9e8 	bl	800396a <xTaskCreate>
  xTaskCreate(VLPT_TASK, "VLPT", 128, NULL, 0 , &VLPThandler);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <main+0xe0>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4912      	ldr	r1, [pc, #72]	; (80005f0 <main+0xe4>)
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <main+0xe8>)
 80005aa:	f003 f9de 	bl	800396a <xTaskCreate>

  vTaskStartScheduler();
 80005ae:	f003 fbd7 	bl	8003d60 <vTaskStartScheduler>

  /* USER CODE END 2 */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0xa6>
 80005b4:	20000290 	.word	0x20000290
 80005b8:	20003ff8 	.word	0x20003ff8
 80005bc:	20003ff0 	.word	0x20003ff0
 80005c0:	08005254 	.word	0x08005254
 80005c4:	08005274 	.word	0x08005274
 80005c8:	20003fe8 	.word	0x20003fe8
 80005cc:	080052a0 	.word	0x080052a0
 80005d0:	08000771 	.word	0x08000771
 80005d4:	20003fec 	.word	0x20003fec
 80005d8:	080052a4 	.word	0x080052a4
 80005dc:	08000895 	.word	0x08000895
 80005e0:	2000403c 	.word	0x2000403c
 80005e4:	080052a8 	.word	0x080052a8
 80005e8:	080009b9 	.word	0x080009b9
 80005ec:	20003ff4 	.word	0x20003ff4
 80005f0:	080052ac 	.word	0x080052ac
 80005f4:	08000add 	.word	0x08000add

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fdbe 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output volta  ge
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 ff99 	bl	80015b4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fb00 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f9fa 	bl	8001aa4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 fae9 	bl	8000c8c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 feaa 	bl	800245c <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 fabd 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20003ff8 	.word	0x20003ff8
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_GPIO_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_GPIO_Init+0x4c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <MX_GPIO_Init+0x4c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_GPIO_Init+0x4c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HPT_TASK>:

/* USER CODE BEGIN 4 */

void HPT_TASK (void *pvParameters)
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b0ab      	sub	sp, #172	; 0xac
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
//	xSemaphoreGive(CountingSem);

	while(1)
	{
		char str [150];
		strcpy(str, "Entered HPT Task\n About to ACQUIRE the Semaphore \n\n");
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4a3e      	ldr	r2, [pc, #248]	; (8000878 <HPT_TASK+0x108>)
 800077e:	461c      	mov	r4, r3
 8000780:	4615      	mov	r5, r2
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd1a 	bl	80001d0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f107 010c 	add.w	r1, r7, #12
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	4834      	ldr	r0, [pc, #208]	; (800087c <HPT_TASK+0x10c>)
 80007aa:	f001 fea4 	bl	80024f6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <HPT_TASK+0x110>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f04f 31ff 	mov.w	r1, #4294967295
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 feee 	bl	8003598 <xQueueSemaphoreTake>
		itoa(resource[indx] , sresource, 10);
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HPT_TASK+0x114>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <HPT_TASK+0x118>)
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80007ca:	220a      	movs	r2, #10
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fcd9 	bl	8005184 <itoa>
		strcpy(str, "Leaving HPT Task\n Data ACCESSED is:: ");
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <HPT_TASK+0x11c>)
 80007d8:	461c      	mov	r4, r3
 80007da:	4615      	mov	r5, r2
 80007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e8:	6020      	str	r0, [r4, #0]
 80007ea:	3404      	adds	r4, #4
 80007ec:	8021      	strh	r1, [r4, #0]
		strcat(str, sresource);
 80007ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fccd 	bl	8005198 <strcat>
		strcat(str, "\n Not releasing the Semaphore\n\n\n");
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4413      	add	r3, r2
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <HPT_TASK+0x120>)
 8000814:	4614      	mov	r4, r2
 8000816:	469c      	mov	ip, r3
 8000818:	f104 0e20 	add.w	lr, r4, #32
 800081c:	4665      	mov	r5, ip
 800081e:	4626      	mov	r6, r4
 8000820:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000822:	6028      	str	r0, [r5, #0]
 8000824:	6069      	str	r1, [r5, #4]
 8000826:	60aa      	str	r2, [r5, #8]
 8000828:	60eb      	str	r3, [r5, #12]
 800082a:	3410      	adds	r4, #16
 800082c:	f10c 0c10 	add.w	ip, ip, #16
 8000830:	4574      	cmp	r4, lr
 8000832:	d1f3      	bne.n	800081c <HPT_TASK+0xac>
 8000834:	4663      	mov	r3, ip
 8000836:	4622      	mov	r2, r4
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <HPT_TASK+0x10c>)
 8000854:	f001 fe4f 	bl	80024f6 <HAL_UART_Transmit>

		indx++;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HPT_TASK+0x114>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HPT_TASK+0x114>)
 8000860:	6013      	str	r3, [r2, #0]
		if(indx > 2) indx = 0;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HPT_TASK+0x114>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	dd02      	ble.n	8000870 <HPT_TASK+0x100>
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HPT_TASK+0x114>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
//		vTaskDelay(3000);
		vTaskDelete(NULL);
 8000870:	2000      	movs	r0, #0
 8000872:	f003 f9b1 	bl	8003bd8 <vTaskDelete>
	{
 8000876:	e77f      	b.n	8000778 <HPT_TASK+0x8>
 8000878:	080052b4 	.word	0x080052b4
 800087c:	20003ff8 	.word	0x20003ff8
 8000880:	20003ff0 	.word	0x20003ff0
 8000884:	2000028c 	.word	0x2000028c
 8000888:	20000000 	.word	0x20000000
 800088c:	080052e8 	.word	0x080052e8
 8000890:	08005310 	.word	0x08005310

08000894 <MPT_TASK>:
	}
}


void MPT_TASK (void *pvParameters)
{
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b0ab      	sub	sp, #172	; 0xac
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while(1)
	{
		char str [150];
		strcpy(str, "Entered MPT Task\n About to ACQUIRE the Semaphore \n\n");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MPT_TASK+0x108>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b2:	682b      	ldr	r3, [r5, #0]
 80008b4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc88 	bl	80001d0 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 010c 	add.w	r1, r7, #12
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4834      	ldr	r0, [pc, #208]	; (80009a0 <MPT_TASK+0x10c>)
 80008ce:	f001 fe12 	bl	80024f6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MPT_TASK+0x110>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f04f 31ff 	mov.w	r1, #4294967295
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fe5c 	bl	8003598 <xQueueSemaphoreTake>
		itoa(resource[indx] , sresource, 10);
 80008e0:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <MPT_TASK+0x114>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <MPT_TASK+0x118>)
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80008ee:	220a      	movs	r2, #10
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fc47 	bl	8005184 <itoa>
		strcpy(str, "Leaving MPT Task\n Data ACCESSED is:: ");
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MPT_TASK+0x11c>)
 80008fc:	461c      	mov	r4, r3
 80008fe:	4615      	mov	r5, r2
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000908:	e895 0003 	ldmia.w	r5, {r0, r1}
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	3404      	adds	r4, #4
 8000910:	8021      	strh	r1, [r4, #0]
		strcat(str, sresource);
 8000912:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fc3b 	bl	8005198 <strcat>
		strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc52 	bl	80001d0 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4413      	add	r3, r2
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <MPT_TASK+0x120>)
 8000938:	4614      	mov	r4, r2
 800093a:	469c      	mov	ip, r3
 800093c:	f104 0e20 	add.w	lr, r4, #32
 8000940:	4665      	mov	r5, ip
 8000942:	4626      	mov	r6, r4
 8000944:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000946:	6028      	str	r0, [r5, #0]
 8000948:	6069      	str	r1, [r5, #4]
 800094a:	60aa      	str	r2, [r5, #8]
 800094c:	60eb      	str	r3, [r5, #12]
 800094e:	3410      	adds	r4, #16
 8000950:	f10c 0c10 	add.w	ip, ip, #16
 8000954:	4574      	cmp	r4, lr
 8000956:	d1f3      	bne.n	8000940 <MPT_TASK+0xac>
 8000958:	4663      	mov	r3, ip
 800095a:	4622      	mov	r2, r4
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc33 	bl	80001d0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <MPT_TASK+0x10c>)
 8000978:	f001 fdbd 	bl	80024f6 <HAL_UART_Transmit>

		indx++;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MPT_TASK+0x114>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <MPT_TASK+0x114>)
 8000984:	6013      	str	r3, [r2, #0]
		if(indx > 2) indx = 0;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MPT_TASK+0x114>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b02      	cmp	r3, #2
 800098c:	dd02      	ble.n	8000994 <MPT_TASK+0x100>
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MPT_TASK+0x114>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]

//		vTaskDelay(2000);
		vTaskDelete(NULL);
 8000994:	2000      	movs	r0, #0
 8000996:	f003 f91f 	bl	8003bd8 <vTaskDelete>
	{
 800099a:	e77f      	b.n	800089c <MPT_TASK+0x8>
 800099c:	08005334 	.word	0x08005334
 80009a0:	20003ff8 	.word	0x20003ff8
 80009a4:	20003ff0 	.word	0x20003ff0
 80009a8:	2000028c 	.word	0x2000028c
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08005368 	.word	0x08005368
 80009b4:	08005310 	.word	0x08005310

080009b8 <LPT_TASK>:
}



void LPT_TASK (void *pvParameters)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b0ab      	sub	sp, #172	; 0xac
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	char sresource[3];
	while(1)
	{
		char str [150];
		strcpy(str, "Entered LPT Task\n About to ACQUIRE the Semaphore \n\n");
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <LPT_TASK+0x108>)
 80009c6:	461c      	mov	r4, r3
 80009c8:	4615      	mov	r5, r2
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fbf6 	bl	80001d0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f107 010c 	add.w	r1, r7, #12
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <LPT_TASK+0x10c>)
 80009f2:	f001 fd80 	bl	80024f6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <LPT_TASK+0x110>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f04f 31ff 	mov.w	r1, #4294967295
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fdca 	bl	8003598 <xQueueSemaphoreTake>
		itoa(resource[indx] , sresource, 10);
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <LPT_TASK+0x114>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <LPT_TASK+0x118>)
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000a12:	220a      	movs	r2, #10
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fbb5 	bl	8005184 <itoa>
		strcpy(str, "Leaving LPT Task\n Data ACCESSED is:: ");
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <LPT_TASK+0x11c>)
 8000a20:	461c      	mov	r4, r3
 8000a22:	4615      	mov	r5, r2
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a30:	6020      	str	r0, [r4, #0]
 8000a32:	3404      	adds	r4, #4
 8000a34:	8021      	strh	r1, [r4, #0]
		strcat(str, sresource);
 8000a36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 fba9 	bl	8005198 <strcat>
		strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <LPT_TASK+0x120>)
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	469c      	mov	ip, r3
 8000a60:	f104 0e20 	add.w	lr, r4, #32
 8000a64:	4665      	mov	r5, ip
 8000a66:	4626      	mov	r6, r4
 8000a68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a6a:	6028      	str	r0, [r5, #0]
 8000a6c:	6069      	str	r1, [r5, #4]
 8000a6e:	60aa      	str	r2, [r5, #8]
 8000a70:	60eb      	str	r3, [r5, #12]
 8000a72:	3410      	adds	r4, #16
 8000a74:	f10c 0c10 	add.w	ip, ip, #16
 8000a78:	4574      	cmp	r4, lr
 8000a7a:	d1f3      	bne.n	8000a64 <LPT_TASK+0xac>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	4622      	mov	r2, r4
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <LPT_TASK+0x10c>)
 8000a9c:	f001 fd2b 	bl	80024f6 <HAL_UART_Transmit>

		indx++;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <LPT_TASK+0x114>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <LPT_TASK+0x114>)
 8000aa8:	6013      	str	r3, [r2, #0]
		if(indx > 2) indx = 0;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <LPT_TASK+0x114>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	dd02      	ble.n	8000ab8 <LPT_TASK+0x100>
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LPT_TASK+0x114>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

//		vTaskDelay(1000);
		vTaskDelete(NULL);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f003 f88d 	bl	8003bd8 <vTaskDelete>
	{
 8000abe:	e77f      	b.n	80009c0 <LPT_TASK+0x8>
 8000ac0:	08005390 	.word	0x08005390
 8000ac4:	20003ff8 	.word	0x20003ff8
 8000ac8:	20003ff0 	.word	0x20003ff0
 8000acc:	2000028c 	.word	0x2000028c
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	080053c4 	.word	0x080053c4
 8000ad8:	08005310 	.word	0x08005310

08000adc <VLPT_TASK>:

	}
}

void VLPT_TASK (void *pvParameters)
{
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	b0ab      	sub	sp, #172	; 0xac
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while(1)
	{
		char str [150];
		strcpy(str, "Entered VLPT Task\n About to ACQUIRE the Semaphore \n\n");
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4a42      	ldr	r2, [pc, #264]	; (8000bf4 <VLPT_TASK+0x118>)
 8000aea:	461c      	mov	r4, r3
 8000aec:	4615      	mov	r5, r2
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000afe:	6020      	str	r0, [r4, #0]
 8000b00:	3404      	adds	r4, #4
 8000b02:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb61 	bl	80001d0 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f107 010c 	add.w	r1, r7, #12
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	4837      	ldr	r0, [pc, #220]	; (8000bf8 <VLPT_TASK+0x11c>)
 8000b1c:	f001 fceb 	bl	80024f6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <VLPT_TASK+0x120>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fd35 	bl	8003598 <xQueueSemaphoreTake>
		itoa(resource[indx] , sresource, 10);
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <VLPT_TASK+0x124>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <VLPT_TASK+0x128>)
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fb20 	bl	8005184 <itoa>
		strcpy(str, "Leaving VLPT Task\n Data ACCESSED is:: ");
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <VLPT_TASK+0x12c>)
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5a:	6020      	str	r0, [r4, #0]
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	8021      	strh	r1, [r4, #0]
 8000b60:	3402      	adds	r4, #2
 8000b62:	0c0b      	lsrs	r3, r1, #16
 8000b64:	7023      	strb	r3, [r4, #0]
		strcat(str, sresource);
 8000b66:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fb11 	bl	8005198 <strcat>
		strcat(str, "\n Not releasing the Semaphore\n\n\n");
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb28 	bl	80001d0 <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <VLPT_TASK+0x130>)
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	469c      	mov	ip, r3
 8000b90:	f104 0e20 	add.w	lr, r4, #32
 8000b94:	4665      	mov	r5, ip
 8000b96:	4626      	mov	r6, r4
 8000b98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b9a:	6028      	str	r0, [r5, #0]
 8000b9c:	6069      	str	r1, [r5, #4]
 8000b9e:	60aa      	str	r2, [r5, #8]
 8000ba0:	60eb      	str	r3, [r5, #12]
 8000ba2:	3410      	adds	r4, #16
 8000ba4:	f10c 0c10 	add.w	ip, ip, #16
 8000ba8:	4574      	cmp	r4, lr
 8000baa:	d1f3      	bne.n	8000b94 <VLPT_TASK+0xb8>
 8000bac:	4663      	mov	r3, ip
 8000bae:	4622      	mov	r2, r4
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb09 	bl	80001d0 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f107 010c 	add.w	r1, r7, #12
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <VLPT_TASK+0x11c>)
 8000bcc:	f001 fc93 	bl	80024f6 <HAL_UART_Transmit>

		indx++;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <VLPT_TASK+0x124>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <VLPT_TASK+0x124>)
 8000bd8:	6013      	str	r3, [r2, #0]
		if(indx > 2) indx = 0;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <VLPT_TASK+0x124>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	dd02      	ble.n	8000be8 <VLPT_TASK+0x10c>
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <VLPT_TASK+0x124>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

		vTaskDelay(500);
 8000be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bec:	f003 f884 	bl	8003cf8 <vTaskDelay>
	{
 8000bf0:	e778      	b.n	8000ae4 <VLPT_TASK+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	080053ec 	.word	0x080053ec
 8000bf8:	20003ff8 	.word	0x20003ff8
 8000bfc:	20003ff0 	.word	0x20003ff0
 8000c00:	2000028c 	.word	0x2000028c
 8000c04:	20000000 	.word	0x20000000
 8000c08:	08005424 	.word	0x08005424
 8000c0c:	08005310 	.word	0x08005310

08000c10 <HAL_UART_RxCpltCallback>:
/* USER CODE END 4 */

//UART CALLBACK Function

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4910      	ldr	r1, [pc, #64]	; (8000c5c <HAL_UART_RxCpltCallback+0x4c>)
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 fcfc 	bl	800261a <HAL_UART_Receive_IT>
	if(rx_data == 'r')
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_RxCpltCallback+0x4c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b72      	cmp	r3, #114	; 0x72
 8000c28:	d114      	bne.n	8000c54 <HAL_UART_RxCpltCallback+0x44>
	{
		// Release the semaphore here
		// The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as it will get set
		// pdTRUE inside the interrupt safe API function if a context switch is required

		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(CountingSem, &xHigherPriorityTaskWoken); // ISR SAFE version
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_UART_RxCpltCallback+0x50>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f107 020c 	add.w	r2, r7, #12
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fc1f 	bl	800347c <xQueueGiveFromISR>

		/*Pass the xHigherPriortyTaskWoken value into port[END_SWITCHING_ISR(). If xHigherPriorityTaskWoken
		was set to pdTRUE inside xSemaphoreGiveFromISR()
		then calling portEND_SWOICTHING_ISR() will request a context switch. IF xHigherPriorityTaskWoken is till pdFALSE then calling portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <HAL_UART_RxCpltCallback+0x44>
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_UART_RxCpltCallback+0x54>)
 8000c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	f3bf 8f6f 	isb	sy
	}
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000290 	.word	0x20000290
 8000c60:	20003ff0 	.word	0x20003ff0
 8000c64:	e000ed04 	.word	0xe000ed04

08000c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7a:	f000 f96b 	bl	8000f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40001000 	.word	0x40001000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_MspInit+0x54>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x54>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_MspInit+0x54>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_MspInit+0x54>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210f      	movs	r1, #15
 8000cda:	f06f 0001 	mvn.w	r0, #1
 8000cde:	f000 fa11 	bl	8001104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d133      	bne.n	8000d7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_UART_MspInit+0x98>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0x9c>)
 8000d66:	f000 fa89 	bl	800127c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	2026      	movs	r0, #38	; 0x26
 8000d70:	f000 f9c8 	bl	8001104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d74:	2026      	movs	r0, #38	; 0x26
 8000d76:	f000 f9e1 	bl	800113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2036      	movs	r0, #54	; 0x36
 8000da6:	f000 f9ad 	bl	8001104 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000daa:	2036      	movs	r0, #54	; 0x36
 8000dac:	f000 f9c6 	bl	800113c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_InitTick+0xa4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_InitTick+0xa4>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_InitTick+0xa4>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f860 	bl	8001e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ddc:	f001 f836 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8000de0:	4603      	mov	r3, r0
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_InitTick+0xa8>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	3b01      	subs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_InitTick+0xac>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_InitTick+0xb0>)
 8000df8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_InitTick+0xac>)
 8000dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_InitTick+0xac>)
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_InitTick+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_InitTick+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_InitTick+0xac>)
 8000e16:	f001 f873 	bl	8001f00 <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_InitTick+0xac>)
 8000e22:	f001 f8c7 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
 8000e26:	4603      	mov	r3, r0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	431bde83 	.word	0x431bde83
 8000e3c:	20004040 	.word	0x20004040
 8000e40:	40001000 	.word	0x40001000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <USART2_IRQHandler+0x10>)
 8000e76:	f001 fc01 	bl	800267c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20003ff8 	.word	0x20003ff8

08000e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM6_DAC_IRQHandler+0x10>)
 8000e8a:	f001 f903 	bl	8002094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20004040 	.word	0x20004040

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee6:	f7ff ffd7 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f004 f90f 	bl	800510c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb0d 	bl	800050c <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f00:	080054a4 	.word	0x080054a4
  ldr r2, =_sbss
 8000f04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f08:	2000408c 	.word	0x2000408c

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f8d8 	bl	80010ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff26 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fea8 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000014 	.word	0x20000014
 8000f78:	20004088 	.word	0x20004088

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20004088 	.word	0x20004088

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff4c 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001116:	f7ff ff61 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800111a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff ffb1 	bl	8001088 <NVIC_EncodePriority>
 8001126:	4602      	mov	r2, r0
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff80 	bl	8001034 <__NVIC_SetPriority>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff54 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001166:	f7ff ff09 	bl	8000f7c <HAL_GetTick>
 800116a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d008      	beq.n	800118a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e052      	b.n	8001230 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0216 	bic.w	r2, r2, #22
 8001198:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_DMA_Abort+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0208 	bic.w	r2, r2, #8
 80011c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	e013      	b.n	8001204 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011dc:	f7ff fece 	bl	8000f7c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d90c      	bls.n	8001204 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2220      	movs	r2, #32
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e015      	b.n	8001230 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e4      	bne.n	80011dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	223f      	movs	r2, #63	; 0x3f
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d004      	beq.n	8001256 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00c      	b.n	8001270 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e16b      	b.n	8001570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 815a 	bne.w	800156a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80b4 	beq.w	800156a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a5f      	ldr	r2, [pc, #380]	; (8001588 <HAL_GPIO_Init+0x30c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a5b      	ldr	r2, [pc, #364]	; (800158c <HAL_GPIO_Init+0x310>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x314>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x318>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x31c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x320>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x21a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x216>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x328>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x212>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x32c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x20e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x330>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x20a>
 8001482:	2307      	movs	r3, #7
 8001484:	e00e      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001486:	2308      	movs	r3, #8
 8001488:	e00c      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800148a:	2306      	movs	r3, #6
 800148c:	e00a      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800148e:	2305      	movs	r3, #5
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001492:	2304      	movs	r3, #4
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x310>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_GPIO_Init+0x334>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f ae90 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40021400 	.word	0x40021400
 80015a8:	40021800 	.word	0x40021800
 80015ac:	40021c00 	.word	0x40021c00
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e264      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d2:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4ba0      	ldr	r3, [pc, #640]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e23f      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x74>
 800161a:	4b91      	ldr	r3, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a90      	ldr	r2, [pc, #576]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8a      	ldr	r2, [pc, #552]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 800164c:	4b84      	ldr	r3, [pc, #528]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a83      	ldr	r2, [pc, #524]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a80      	ldr	r2, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc86 	bl	8000f7c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc82 	bl	8000f7c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e204      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xc0>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc72 	bl	8000f7c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fc6e 	bl	8000f7c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1f0      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0xe8>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1c4      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4952      	ldr	r1, [pc, #328]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x2b0>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fc27 	bl	8000f7c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fc23 	bl	8000f7c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1a5      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4940      	ldr	r1, [pc, #256]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x2b0>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fc06 	bl	8000f7c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fc02 	bl	8000f7c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e184      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d030      	beq.n	8001800 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_RCC_OscConfig+0x2b4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fbe6 	bl	8000f7c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fbe2 	bl	8000f7c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e164      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x200>
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_OscConfig+0x2b4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fbcf 	bl	8000f7c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fbcb 	bl	8000f7c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e14d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a0 	beq.w	800194e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d121      	bne.n	800188e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fb91 	bl	8000f7c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e011      	b.n	8001882 <HAL_RCC_OscConfig+0x2ce>
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
 800186c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff fb84 	bl	8000f7c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e106      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <HAL_RCC_OscConfig+0x4e4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
 8001896:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a80      	ldr	r2, [pc, #512]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	e01c      	b.n	80018de <HAL_RCC_OscConfig+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x312>
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a7a      	ldr	r2, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a77      	ldr	r2, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x32a>
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a74      	ldr	r2, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d015      	beq.n	8001912 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb49 	bl	8000f7c <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb45 	bl	8000f7c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0c5      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ee      	beq.n	80018ee <HAL_RCC_OscConfig+0x33a>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb33 	bl	8000f7c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff fb2f 	bl	8000f7c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0af      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 809b 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d05c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d141      	bne.n	80019f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x4ec>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fb03 	bl	8000f7c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff faff 	bl	8000f7c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e081      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198c:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_OscConfig+0x4ec>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fad8 	bl	8000f7c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fad4 	bl	8000f7c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e056      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x41c>
 80019ee:	e04e      	b.n	8001a8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_OscConfig+0x4ec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fac1 	bl	8000f7c <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fabd 	bl	8000f7c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e03f      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x44a>
 8001a1c:	e037      	b.n	8001a8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e032      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d028      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d121      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d11a      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470060 	.word	0x42470060

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f9f2 	bl	8000f7c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f9ee 	bl	8000f7c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f8a0 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08005454 	.word	0x08005454
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000010 	.word	0x20000010

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d00d      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	f200 80bd 	bhi.w	8001e14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e0b7      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ca6:	60bb      	str	r3, [r7, #8]
       break;
 8001ca8:	e0b7      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cac:	60bb      	str	r3, [r7, #8]
      break;
 8001cae:	e0b4      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04d      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	ea02 0800 	and.w	r8, r2, r0
 8001cde:	ea03 0901 	and.w	r9, r3, r1
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	014b      	lsls	r3, r1, #5
 8001cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cf4:	0142      	lsls	r2, r0, #5
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	ebb0 0008 	subs.w	r0, r0, r8
 8001cfe:	eb61 0109 	sbc.w	r1, r1, r9
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d10:	0182      	lsls	r2, r0, #6
 8001d12:	1a12      	subs	r2, r2, r0
 8001d14:	eb63 0301 	sbc.w	r3, r3, r1
 8001d18:	f04f 0000 	mov.w	r0, #0
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	00d9      	lsls	r1, r3, #3
 8001d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d26:	00d0      	lsls	r0, r2, #3
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	eb12 0208 	adds.w	r2, r2, r8
 8001d30:	eb43 0309 	adc.w	r3, r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0259      	lsls	r1, r3, #9
 8001d3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d42:	0250      	lsls	r0, r2, #9
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f7fe fa44 	bl	80001e0 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e04a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	ea02 0400 	and.w	r4, r2, r0
 8001d7a:	ea03 0501 	and.w	r5, r3, r1
 8001d7e:	4620      	mov	r0, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	014b      	lsls	r3, r1, #5
 8001d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d90:	0142      	lsls	r2, r0, #5
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	1b00      	subs	r0, r0, r4
 8001d98:	eb61 0105 	sbc.w	r1, r1, r5
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	018b      	lsls	r3, r1, #6
 8001da6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001daa:	0182      	lsls	r2, r0, #6
 8001dac:	1a12      	subs	r2, r2, r0
 8001dae:	eb63 0301 	sbc.w	r3, r3, r1
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	00d9      	lsls	r1, r3, #3
 8001dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc0:	00d0      	lsls	r0, r2, #3
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	1912      	adds	r2, r2, r4
 8001dc8:	eb45 0303 	adc.w	r3, r5, r3
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0299      	lsls	r1, r3, #10
 8001dd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dda:	0290      	lsls	r0, r2, #10
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe f9f8 	bl	80001e0 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	60bb      	str	r3, [r7, #8]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e16:	60bb      	str	r3, [r7, #8]
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000000c 	.word	0x2000000c

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a9b      	lsrs	r3, r3, #10
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08005464 	.word	0x08005464

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffdc 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08005464 	.word	0x08005464

08001e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RCC_GetClockConfig+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f839 	bl	8001f9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 f9d8 	bl	80022f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04e      	b.n	800206a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d022      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d01d      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d018      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_TIM_Base_Start_IT+0xcc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_TIM_Base_Start_IT+0xd0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00e      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_TIM_Base_Start_IT+0xd4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_TIM_Base_Start_IT+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x80>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_TIM_Base_Start_IT+0xdc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b06      	cmp	r3, #6
 8002044:	d010      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002056:	e007      	b.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40010000 	.word	0x40010000
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40010400 	.word	0x40010400
 800208c:	40014000 	.word	0x40014000
 8002090:	40001800 	.word	0x40001800

08002094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0202 	mvn.w	r2, #2
 80020c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8ee 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8e0 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8f1 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0204 	mvn.w	r2, #4
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8c4 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8b6 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8c7 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f89a 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f88c 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f89d 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f870 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f862 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f873 	bl	80022cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0201 	mvn.w	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fd28 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f902 	bl	8002448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f838 	bl	80022e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b20      	cmp	r3, #32
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b20      	cmp	r3, #32
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8cc 	bl	8002434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <TIM_Base_SetConfig+0x114>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d00f      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3d      	ldr	r2, [pc, #244]	; (800240c <TIM_Base_SetConfig+0x118>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00b      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <TIM_Base_SetConfig+0x11c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <TIM_Base_SetConfig+0x120>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3a      	ldr	r2, [pc, #232]	; (8002418 <TIM_Base_SetConfig+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <TIM_Base_SetConfig+0x114>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d027      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <TIM_Base_SetConfig+0x118>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d023      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <TIM_Base_SetConfig+0x11c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <TIM_Base_SetConfig+0x120>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <TIM_Base_SetConfig+0x124>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d017      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <TIM_Base_SetConfig+0x128>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <TIM_Base_SetConfig+0x12c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00f      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <TIM_Base_SetConfig+0x130>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00b      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <TIM_Base_SetConfig+0x134>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a24      	ldr	r2, [pc, #144]	; (800242c <TIM_Base_SetConfig+0x138>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d003      	beq.n	80023a6 <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <TIM_Base_SetConfig+0x13c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <TIM_Base_SetConfig+0x114>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0xf8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <TIM_Base_SetConfig+0x124>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800
 8002414:	40000c00 	.word	0x40000c00
 8002418:	40010400 	.word	0x40010400
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800
 8002428:	40001800 	.word	0x40001800
 800242c:	40001c00 	.word	0x40001c00
 8002430:	40002000 	.word	0x40002000

08002434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e03f      	b.n	80024ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fc34 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fc7b 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	; 0x28
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d17c      	bne.n	8002610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_Transmit+0x2c>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e075      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x3e>
 8002530:	2302      	movs	r3, #2
 8002532:	e06e      	b.n	8002612 <HAL_UART_Transmit+0x11c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254a:	f7fe fd17 	bl	8000f7c <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x82>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002588:	e02a      	b.n	80025e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa3d 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e036      	b.n	8002612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3302      	adds	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e007      	b.n	80025d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cf      	bne.n	800258a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa0d 	bl	8002a14 <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d11d      	bne.n	8002670 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Receive_IT+0x26>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e016      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Receive_IT+0x38>
 800264e:	2302      	movs	r3, #2
 8002650:	e00f      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	461a      	mov	r2, r3
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa1e 	bl	8002aa8 <UART_Start_Receive_IT>
 800266c:	4603      	mov	r3, r0
 800266e:	e000      	b.n	8002672 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_UART_IRQHandler+0x52>
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fad1 	bl	8002c6e <UART_Receive_IT>
      return;
 80026cc:	e17c      	b.n	80029c8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b1 	beq.w	8002838 <HAL_UART_IRQHandler+0x1bc>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_UART_IRQHandler+0x70>
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80a6 	beq.w	8002838 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_UART_IRQHandler+0x90>
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_UART_IRQHandler+0xb0>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f043 0202 	orr.w	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_UART_IRQHandler+0xd0>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00f      	beq.n	8002776 <HAL_UART_IRQHandler+0xfa>
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_UART_IRQHandler+0xee>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0208 	orr.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 811f 	beq.w	80029be <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_UART_IRQHandler+0x11e>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fa6a 	bl	8002c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <HAL_UART_IRQHandler+0x146>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d031      	beq.n	8002826 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9aa 	bl	8002b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d123      	bne.n	800281e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d013      	beq.n	8002816 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <HAL_UART_IRQHandler+0x354>)
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fd1c 	bl	8001238 <HAL_DMA_Abort_IT>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002810:	4610      	mov	r0, r2
 8002812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e00e      	b.n	8002834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8e6 	bl	80029e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	e00a      	b.n	8002834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8e2 	bl	80029e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	e006      	b.n	8002834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8de 	bl	80029e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002832:	e0c4      	b.n	80029be <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	bf00      	nop
    return;
 8002836:	e0c2      	b.n	80029be <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 80a2 	bne.w	8002986 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 809c 	beq.w	8002986 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8096 	beq.w	8002986 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d14f      	bne.n	800291e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002888:	8a3b      	ldrh	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8099 	beq.w	80029c2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002894:	8a3a      	ldrh	r2, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	f080 8093 	bcs.w	80029c2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8a3a      	ldrh	r2, [r7, #16]
 80028a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ac:	d02b      	beq.n	8002906 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028bc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fc29 	bl	8001158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800290e:	b29b      	uxth	r3, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f870 	bl	80029fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800291c:	e051      	b.n	80029c2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002926:	b29b      	uxth	r3, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d047      	beq.n	80029c6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002936:	8a7b      	ldrh	r3, [r7, #18]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d044      	beq.n	80029c6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800294a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0210 	bic.w	r2, r2, #16
 8002978:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800297a:	8a7b      	ldrh	r3, [r7, #18]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f83c 	bl	80029fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002984:	e01f      	b.n	80029c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_UART_IRQHandler+0x326>
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8ff 	bl	8002b9e <UART_Transmit_IT>
    return;
 80029a0:	e012      	b.n	80029c8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <HAL_UART_IRQHandler+0x34c>
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f941 	bl	8002c3e <UART_EndTransmit_IT>
    return;
 80029bc:	e004      	b.n	80029c8 <HAL_UART_IRQHandler+0x34c>
    return;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80029c6:	bf00      	nop
  }
}
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08002b77 	.word	0x08002b77

080029d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a24:	e02c      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d028      	beq.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a34:	f7fe faa2 	bl	8000f7c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d21d      	bcs.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e00f      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d0c3      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2222      	movs	r2, #34	; 0x22
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0220 	orr.w	r2, r2, #32
 8002b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0210 	bic.w	r2, r2, #16
 8002b5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff ff29 	bl	80029e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b21      	cmp	r3, #33	; 0x21
 8002bb0:	d13e      	bne.n	8002c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d114      	bne.n	8002be6 <UART_Transmit_IT+0x48>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d110      	bne.n	8002be6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	1c9a      	adds	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]
 8002be4:	e008      	b.n	8002bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6211      	str	r1, [r2, #32]
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4619      	mov	r1, r3
 8002c06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff feb8 	bl	80029d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b22      	cmp	r3, #34	; 0x22
 8002c80:	f040 8087 	bne.w	8002d92 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d117      	bne.n	8002cbe <UART_Receive_IT+0x50>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
 8002cbc:	e026      	b.n	8002d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d007      	beq.n	8002ce2 <UART_Receive_IT+0x74>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <UART_Receive_IT+0x82>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e008      	b.n	8002d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d136      	bne.n	8002d8e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0220 	bic.w	r2, r2, #32
 8002d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10e      	bne.n	8002d7e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0210 	bic.w	r2, r2, #16
 8002d6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe40 	bl	80029fc <HAL_UARTEx_RxEventCallback>
 8002d7c:	e002      	b.n	8002d84 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ff46 	bl	8000c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e002      	b.n	8002d94 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da0:	b09f      	sub	sp, #124	; 0x7c
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	ea40 0301 	orr.w	r3, r0, r1
 8002dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002de0:	f021 010c 	bic.w	r1, r1, #12
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dea:	430b      	orrs	r3, r1
 8002dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	6999      	ldr	r1, [r3, #24]
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	ea40 0301 	orr.w	r3, r0, r1
 8002e04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4bc5      	ldr	r3, [pc, #788]	; (8003120 <UART_SetConfig+0x384>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d004      	beq.n	8002e1a <UART_SetConfig+0x7e>
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4bc3      	ldr	r3, [pc, #780]	; (8003124 <UART_SetConfig+0x388>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d103      	bne.n	8002e22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e1a:	f7ff f82b 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002e1e:	6778      	str	r0, [r7, #116]	; 0x74
 8002e20:	e002      	b.n	8002e28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7ff f813 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002e26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	f040 80b6 	bne.w	8002fa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e36:	461c      	mov	r4, r3
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	6439      	str	r1, [r7, #64]	; 0x40
 8002e44:	415b      	adcs	r3, r3
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
 8002e48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e4c:	1912      	adds	r2, r2, r4
 8002e4e:	eb45 0303 	adc.w	r3, r5, r3
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	1911      	adds	r1, r2, r4
 8002e68:	6639      	str	r1, [r7, #96]	; 0x60
 8002e6a:	416b      	adcs	r3, r5
 8002e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	1891      	adds	r1, r2, r2
 8002e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e88:	f7fd f9aa 	bl	80001e0 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4ba5      	ldr	r3, [pc, #660]	; (8003128 <UART_SetConfig+0x38c>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011e      	lsls	r6, r3, #4
 8002e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9c:	461c      	mov	r4, r3
 8002e9e:	f04f 0500 	mov.w	r5, #0
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
 8002eae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eb2:	1912      	adds	r2, r2, r4
 8002eb4:	eb45 0303 	adc.w	r3, r5, r3
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	00d9      	lsls	r1, r3, #3
 8002ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec6:	00d0      	lsls	r0, r2, #3
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	1911      	adds	r1, r2, r4
 8002ece:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed0:	416b      	adcs	r3, r5
 8002ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	1891      	adds	r1, r2, r2
 8002ee0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eee:	f7fd f977 	bl	80001e0 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <UART_SetConfig+0x38c>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a87      	ldr	r2, [pc, #540]	; (8003128 <UART_SetConfig+0x38c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f18:	441e      	add	r6, r3
 8002f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	1894      	adds	r4, r2, r2
 8002f28:	623c      	str	r4, [r7, #32]
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	1812      	adds	r2, r2, r0
 8002f34:	eb41 0303 	adc.w	r3, r1, r3
 8002f38:	f04f 0400 	mov.w	r4, #0
 8002f3c:	f04f 0500 	mov.w	r5, #0
 8002f40:	00dd      	lsls	r5, r3, #3
 8002f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f46:	00d4      	lsls	r4, r2, #3
 8002f48:	4622      	mov	r2, r4
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	1814      	adds	r4, r2, r0
 8002f4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002f50:	414b      	adcs	r3, r1
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	1891      	adds	r1, r2, r2
 8002f60:	61b9      	str	r1, [r7, #24]
 8002f62:	415b      	adcs	r3, r3
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6e:	f7fd f937 	bl	80001e0 <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <UART_SetConfig+0x38c>)
 8002f78:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	2164      	movs	r1, #100	; 0x64
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	3332      	adds	r3, #50	; 0x32
 8002f8a:	4a67      	ldr	r2, [pc, #412]	; (8003128 <UART_SetConfig+0x38c>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	f003 0207 	and.w	r2, r3, #7
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4432      	add	r2, r6
 8002f9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9e:	e0b9      	b.n	8003114 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	f04f 0500 	mov.w	r5, #0
 8002fa8:	4622      	mov	r2, r4
 8002faa:	462b      	mov	r3, r5
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	6139      	str	r1, [r7, #16]
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fb8:	1912      	adds	r2, r2, r4
 8002fba:	eb45 0303 	adc.w	r3, r5, r3
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	00d9      	lsls	r1, r3, #3
 8002fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fcc:	00d0      	lsls	r0, r2, #3
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	eb12 0804 	adds.w	r8, r2, r4
 8002fd6:	eb43 0905 	adc.w	r9, r3, r5
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	008b      	lsls	r3, r1, #2
 8002fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ff2:	0082      	lsls	r2, r0, #2
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd f8f2 	bl	80001e0 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <UART_SetConfig+0x38c>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	011e      	lsls	r6, r3, #4
 800300a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300c:	4618      	mov	r0, r3
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	1894      	adds	r4, r2, r2
 8003018:	60bc      	str	r4, [r7, #8]
 800301a:	415b      	adcs	r3, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003022:	1812      	adds	r2, r2, r0
 8003024:	eb41 0303 	adc.w	r3, r1, r3
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	f04f 0500 	mov.w	r5, #0
 8003030:	00dd      	lsls	r5, r3, #3
 8003032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003036:	00d4      	lsls	r4, r2, #3
 8003038:	4622      	mov	r2, r4
 800303a:	462b      	mov	r3, r5
 800303c:	1814      	adds	r4, r2, r0
 800303e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003040:	414b      	adcs	r3, r1
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	008b      	lsls	r3, r1, #2
 8003058:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800305c:	0082      	lsls	r2, r0, #2
 800305e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003062:	f7fd f8bd 	bl	80001e0 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <UART_SetConfig+0x38c>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <UART_SetConfig+0x38c>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308a:	441e      	add	r6, r3
 800308c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308e:	4618      	mov	r0, r3
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	1894      	adds	r4, r2, r2
 800309a:	603c      	str	r4, [r7, #0]
 800309c:	415b      	adcs	r3, r3
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a4:	1812      	adds	r2, r2, r0
 80030a6:	eb41 0303 	adc.w	r3, r1, r3
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	f04f 0500 	mov.w	r5, #0
 80030b2:	00dd      	lsls	r5, r3, #3
 80030b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b8:	00d4      	lsls	r4, r2, #3
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	eb12 0a00 	adds.w	sl, r2, r0
 80030c2:	eb43 0b01 	adc.w	fp, r3, r1
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	008b      	lsls	r3, r1, #2
 80030da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030de:	0082      	lsls	r2, r0, #2
 80030e0:	4650      	mov	r0, sl
 80030e2:	4659      	mov	r1, fp
 80030e4:	f7fd f87c 	bl	80001e0 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <UART_SetConfig+0x38c>)
 80030ee:	fba3 1302 	umull	r1, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2164      	movs	r1, #100	; 0x64
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <UART_SetConfig+0x38c>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4432      	add	r2, r6
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	377c      	adds	r7, #124	; 0x7c
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40011000 	.word	0x40011000
 8003124:	40011400 	.word	0x40011400
 8003128:	51eb851f 	.word	0x51eb851f

0800312c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 0208 	add.w	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f103 0208 	add.w	r2, r3, #8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0208 	add.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d103      	bne.n	80031ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e00c      	b.n	8003208 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3308      	adds	r3, #8
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e002      	b.n	80031fc <vListInsert+0x2e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d2f6      	bcs.n	80031f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	601a      	str	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d103      	bne.n	8003274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1e5a      	subs	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032be:	f001 fc19 	bl	8004af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	3b01      	subs	r3, #1
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	441a      	add	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	22ff      	movs	r2, #255	; 0xff
 8003302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d114      	bne.n	800333e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01a      	beq.n	8003352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3310      	adds	r3, #16
 8003320:	4618      	mov	r0, r3
 8003322:	f000 ff5f 	bl	80041e4 <xTaskRemoveFromEventList>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <xQueueGenericReset+0xcc>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	e009      	b.n	8003352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3310      	adds	r3, #16
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fef2 	bl	800312c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3324      	adds	r3, #36	; 0x24
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff feed 	bl	800312c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003352:	f001 fbff 	bl	8004b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	613b      	str	r3, [r7, #16]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	3348      	adds	r3, #72	; 0x48
 800339c:	4618      	mov	r0, r3
 800339e:	f001 fccb 	bl	8004d38 <pvPortMalloc>
 80033a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3348      	adds	r3, #72	; 0x48
 80033b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033bc:	79fa      	ldrb	r2, [r7, #7]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f805 	bl	80033d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033ce:	69bb      	ldr	r3, [r7, #24]
	}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e002      	b.n	80033fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003406:	2101      	movs	r1, #1
 8003408:	69b8      	ldr	r0, [r7, #24]
 800340a:	f7ff ff43 	bl	8003294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	613b      	str	r3, [r7, #16]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d90a      	bls.n	800345a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60fb      	str	r3, [r7, #12]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800345a:	2202      	movs	r2, #2
 800345c:	2100      	movs	r1, #0
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ff80 	bl	8003364 <xQueueGenericCreate>
 8003464:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003472:	697b      	ldr	r3, [r7, #20]
	}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	623b      	str	r3, [r7, #32]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	61fb      	str	r3, [r7, #28]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <xQueueGiveFromISR+0x58>
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <xQueueGiveFromISR+0x5c>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <xQueueGiveFromISR+0x5e>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	61bb      	str	r3, [r7, #24]
}
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034f4:	f001 fbe0 	bl	8004cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034f8:	f3ef 8211 	mrs	r2, BASEPRI
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	617a      	str	r2, [r7, #20]
 800350e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003510:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003520:	429a      	cmp	r2, r3
 8003522:	d22b      	bcs.n	800357c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003536:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d112      	bne.n	8003566 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	3324      	adds	r3, #36	; 0x24
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fe49 	bl	80041e4 <xTaskRemoveFromEventList>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e007      	b.n	8003576 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356a:	3301      	adds	r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	b25a      	sxtb	r2, r3
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003576:	2301      	movs	r3, #1
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
 800357a:	e001      	b.n	8003580 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800357c:	2300      	movs	r3, #0
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800358a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800358e:	4618      	mov	r0, r3
 8003590:	3738      	adds	r7, #56	; 0x38
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	623b      	str	r3, [r7, #32]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	61fb      	str	r3, [r7, #28]
}
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035e8:	f000 ffb8 	bl	800455c <xTaskGetSchedulerState>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <xQueueSemaphoreTake+0x60>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <xQueueSemaphoreTake+0x64>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <xQueueSemaphoreTake+0x66>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	61bb      	str	r3, [r7, #24]
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003618:	f001 fa6c 	bl	8004af4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d024      	beq.n	8003672 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003638:	f001 f8b2 	bl	80047a0 <pvTaskIncrementMutexHeldCount>
 800363c:	4602      	mov	r2, r0
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00f      	beq.n	800366a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	3310      	adds	r3, #16
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fdc8 	bl	80041e4 <xTaskRemoveFromEventList>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800365a:	4b54      	ldr	r3, [pc, #336]	; (80037ac <xQueueSemaphoreTake+0x214>)
 800365c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800366a:	f001 fa73 	bl	8004b54 <vPortExitCritical>
				return pdPASS;
 800366e:	2301      	movs	r3, #1
 8003670:	e097      	b.n	80037a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	617b      	str	r3, [r7, #20]
}
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003694:	f001 fa5e 	bl	8004b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003698:	2300      	movs	r3, #0
 800369a:	e082      	b.n	80037a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a2:	f107 030c 	add.w	r3, r7, #12
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fdfe 	bl	80042a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036b0:	f001 fa50 	bl	8004b54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b4:	f000 fbb4 	bl	8003e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b8:	f001 fa1c 	bl	8004af4 <vPortEnterCritical>
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d103      	bne.n	80036d2 <xQueueSemaphoreTake+0x13a>
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d103      	bne.n	80036e8 <xQueueSemaphoreTake+0x150>
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e8:	f001 fa34 	bl	8004b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ec:	463a      	mov	r2, r7
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fded 	bl	80042d4 <xTaskCheckForTimeOut>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d132      	bne.n	8003766 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003702:	f000 f8bf 	bl	8003884 <prvIsQueueEmpty>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d026      	beq.n	800375a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003714:	f001 f9ee 	bl	8004af4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 ff3b 	bl	8004598 <xTaskPriorityInherit>
 8003722:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003724:	f001 fa16 	bl	8004b54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd33 	bl	800419c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003738:	f000 f852 	bl	80037e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800373c:	f000 fb7e 	bl	8003e3c <xTaskResumeAll>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	f47f af68 	bne.w	8003618 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003748:	4b18      	ldr	r3, [pc, #96]	; (80037ac <xQueueSemaphoreTake+0x214>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	e75e      	b.n	8003618 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800375a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800375c:	f000 f840 	bl	80037e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003760:	f000 fb6c 	bl	8003e3c <xTaskResumeAll>
 8003764:	e758      	b.n	8003618 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003768:	f000 f83a 	bl	80037e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800376c:	f000 fb66 	bl	8003e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003772:	f000 f887 	bl	8003884 <prvIsQueueEmpty>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f43f af4d 	beq.w	8003618 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003784:	f001 f9b6 	bl	8004af4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800378a:	f000 f811 	bl	80037b0 <prvGetDisinheritPriorityAfterTimeout>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f000 ff74 	bl	8004684 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800379c:	f001 f9da 	bl	8004b54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3738      	adds	r7, #56	; 0x38
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1c3 0307 	rsb	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e001      	b.n	80037d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037d2:	68fb      	ldr	r3, [r7, #12]
	}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037e8:	f001 f984 	bl	8004af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037f4:	e011      	b.n	800381a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fcee 	bl	80041e4 <xTaskRemoveFromEventList>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800380e:	f000 fdc3 	bl	8004398 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3b01      	subs	r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	dce9      	bgt.n	80037f6 <prvUnlockQueue+0x16>
 8003822:	e000      	b.n	8003826 <prvUnlockQueue+0x46>
					break;
 8003824:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	22ff      	movs	r2, #255	; 0xff
 800382a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800382e:	f001 f991 	bl	8004b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003832:	f001 f95f 	bl	8004af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800383e:	e011      	b.n	8003864 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3310      	adds	r3, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fcc9 	bl	80041e4 <xTaskRemoveFromEventList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003858:	f000 fd9e 	bl	8004398 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	3b01      	subs	r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dce9      	bgt.n	8003840 <prvUnlockQueue+0x60>
 800386c:	e000      	b.n	8003870 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800386e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003878:	f001 f96c 	bl	8004b54 <vPortExitCritical>
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800388c:	f001 f932 	bl	8004af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 f957 	bl	8004b54 <vPortExitCritical>

	return xReturn;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xTaskCreateStatic+0x2a>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	623b      	str	r3, [r7, #32]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	61fb      	str	r3, [r7, #28]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038f6:	2354      	movs	r3, #84	; 0x54
 80038f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b54      	cmp	r3, #84	; 0x54
 80038fe:	d00a      	beq.n	8003916 <xTaskCreateStatic+0x66>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	61bb      	str	r3, [r7, #24]
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003916:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <xTaskCreateStatic+0xac>
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f850 	bl	80039f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003956:	f000 f8d5 	bl	8003b04 <prvAddNewTaskToReadyList>
 800395a:	e001      	b.n	8003960 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003960:	697b      	ldr	r3, [r7, #20]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3728      	adds	r7, #40	; 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f001 f9da 	bl	8004d38 <pvPortMalloc>
 8003984:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800398c:	2054      	movs	r0, #84	; 0x54
 800398e:	f001 f9d3 	bl	8004d38 <pvPortMalloc>
 8003992:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
 80039a0:	e005      	b.n	80039ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f001 fa94 	bl	8004ed0 <vPortFree>
 80039a8:	e001      	b.n	80039ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	2300      	movs	r3, #0
 80039c0:	9303      	str	r3, [sp, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f80e 	bl	80039f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 f893 	bl	8003b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e002      	b.n	80039ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039ea:	69bb      	ldr	r3, [r7, #24]
	}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f023 0307 	bic.w	r3, r3, #7
 8003a1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	617b      	str	r3, [r7, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01f      	beq.n	8003a82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e012      	b.n	8003a6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	7819      	ldrb	r1, [r3, #0]
 8003a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	3334      	adds	r3, #52	; 0x34
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d9e9      	bls.n	8003a48 <prvInitialiseNewTask+0x54>
 8003a74:	e000      	b.n	8003a78 <prvInitialiseNewTask+0x84>
			{
				break;
 8003a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a80:	e003      	b.n	8003a8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d901      	bls.n	8003a94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a90:	2306      	movs	r3, #6
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fb5e 	bl	800316c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fb59 	bl	800316c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	f1c3 0207 	rsb	r2, r3, #7
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	69b8      	ldr	r0, [r7, #24]
 8003ae4:	f000 fed6 	bl	8004894 <pxPortInitialiseStack>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b0c:	f000 fff2 	bl	8004af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b30:	f000 fc56 	bl	80043e0 <prvInitialiseTaskLists>
 8003b34:	e00d      	b.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d802      	bhi.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <prvAddNewTaskToReadyList+0xcc>)
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7ff fafe 	bl	8003186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b8a:	f000 ffe3 	bl	8004b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <prvAddNewTaskToReadyList+0xd0>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000394 	.word	0x20000394
 8003bc0:	20000294 	.word	0x20000294
 8003bc4:	200003a0 	.word	0x200003a0
 8003bc8:	200003b0 	.word	0x200003b0
 8003bcc:	2000039c 	.word	0x2000039c
 8003bd0:	20000298 	.word	0x20000298
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003be0:	f000 ff88 	bl	8004af4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <vTaskDelete+0x18>
 8003bea:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <vTaskDelete+0xf8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	e000      	b.n	8003bf2 <vTaskDelete+0x1a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fb21 	bl	8003240 <uxListRemove>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d115      	bne.n	8003c30 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4932      	ldr	r1, [pc, #200]	; (8003cd4 <vTaskDelete+0xfc>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vTaskDelete+0x58>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	2201      	movs	r2, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43da      	mvns	r2, r3
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <vTaskDelete+0x100>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <vTaskDelete+0x100>)
 8003c2e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff faff 	bl	8003240 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003c42:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <vTaskDelete+0x104>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <vTaskDelete+0x104>)
 8003c4a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <vTaskDelete+0xf8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10b      	bne.n	8003c6e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4820      	ldr	r0, [pc, #128]	; (8003ce0 <vTaskDelete+0x108>)
 8003c5e:	f7ff fa92 	bl	8003186 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <vTaskDelete+0x10c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <vTaskDelete+0x10c>)
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e009      	b.n	8003c82 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <vTaskDelete+0x110>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <vTaskDelete+0x110>)
 8003c76:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fc1f 	bl	80044bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003c7e:	f000 fc4d 	bl	800451c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003c82:	f000 ff67 	bl	8004b54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <vTaskDelete+0x114>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01b      	beq.n	8003cc6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <vTaskDelete+0xf8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d116      	bne.n	8003cc6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003c98:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <vTaskDelete+0x118>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <vTaskDelete+0xde>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60bb      	str	r3, [r7, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <vTaskDelete+0x11c>)
 8003cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000294 	.word	0x20000294
 8003cd4:	20000298 	.word	0x20000298
 8003cd8:	2000039c 	.word	0x2000039c
 8003cdc:	200003b0 	.word	0x200003b0
 8003ce0:	20000368 	.word	0x20000368
 8003ce4:	2000037c 	.word	0x2000037c
 8003ce8:	20000394 	.word	0x20000394
 8003cec:	200003a0 	.word	0x200003a0
 8003cf0:	200003bc 	.word	0x200003bc
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <vTaskDelay+0x60>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <vTaskDelay+0x30>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	60bb      	str	r3, [r7, #8]
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d28:	f000 f87a 	bl	8003e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fd4a 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d34:	f000 f882 	bl	8003e3c <xTaskResumeAll>
 8003d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <vTaskDelay+0x64>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200003bc 	.word	0x200003bc
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d6e:	463a      	mov	r2, r7
 8003d70:	1d39      	adds	r1, r7, #4
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbae 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	9202      	str	r2, [sp, #8]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	491e      	ldr	r1, [pc, #120]	; (8003e08 <vTaskStartScheduler+0xa8>)
 8003d90:	481e      	ldr	r0, [pc, #120]	; (8003e0c <vTaskStartScheduler+0xac>)
 8003d92:	f7ff fd8d 	bl	80038b0 <xTaskCreateStatic>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <vTaskStartScheduler+0xb0>)
 8003d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <vTaskStartScheduler+0xb0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e001      	b.n	8003dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d116      	bne.n	8003de2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	613b      	str	r3, [r7, #16]
}
 8003dc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <vTaskStartScheduler+0xb4>)
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <vTaskStartScheduler+0xb8>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <vTaskStartScheduler+0xbc>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ddc:	f000 fde8 	bl	80049b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003de0:	e00e      	b.n	8003e00 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d10a      	bne.n	8003e00 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60fb      	str	r3, [r7, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <vTaskStartScheduler+0x9e>
}
 8003e00:	bf00      	nop
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	0800544c 	.word	0x0800544c
 8003e0c:	080043b1 	.word	0x080043b1
 8003e10:	200003b8 	.word	0x200003b8
 8003e14:	200003b4 	.word	0x200003b4
 8003e18:	200003a0 	.word	0x200003a0
 8003e1c:	20000398 	.word	0x20000398

08003e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <vTaskSuspendAll+0x18>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	4a03      	ldr	r2, [pc, #12]	; (8003e38 <vTaskSuspendAll+0x18>)
 8003e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	200003bc 	.word	0x200003bc

08003e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <xTaskResumeAll+0x114>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	603b      	str	r3, [r7, #0]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e68:	f000 fe44 	bl	8004af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e6c:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <xTaskResumeAll+0x114>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	4a37      	ldr	r2, [pc, #220]	; (8003f50 <xTaskResumeAll+0x114>)
 8003e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <xTaskResumeAll+0x114>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d161      	bne.n	8003f42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e7e:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <xTaskResumeAll+0x118>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d05d      	beq.n	8003f42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e86:	e02e      	b.n	8003ee6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e88:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <xTaskResumeAll+0x11c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3318      	adds	r3, #24
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff f9d3 	bl	8003240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f9ce 	bl	8003240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <xTaskResumeAll+0x120>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <xTaskResumeAll+0x120>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <xTaskResumeAll+0x124>)
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7ff f95a 	bl	8003186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <xTaskResumeAll+0x128>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d302      	bcc.n	8003ee6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <xTaskResumeAll+0x12c>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <xTaskResumeAll+0x11c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1cc      	bne.n	8003e88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ef4:	f000 fb12 	bl	800451c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <xTaskResumeAll+0x130>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d010      	beq.n	8003f26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f04:	f000 f836 	bl	8003f74 <xTaskIncrementTick>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <xTaskResumeAll+0x12c>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f1      	bne.n	8003f04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <xTaskResumeAll+0x130>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xTaskResumeAll+0x12c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <xTaskResumeAll+0x134>)
 8003f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f42:	f000 fe07 	bl	8004b54 <vPortExitCritical>

	return xAlreadyYielded;
 8003f46:	68bb      	ldr	r3, [r7, #8]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200003bc 	.word	0x200003bc
 8003f54:	20000394 	.word	0x20000394
 8003f58:	20000354 	.word	0x20000354
 8003f5c:	2000039c 	.word	0x2000039c
 8003f60:	20000298 	.word	0x20000298
 8003f64:	20000294 	.word	0x20000294
 8003f68:	200003a8 	.word	0x200003a8
 8003f6c:	200003a4 	.word	0x200003a4
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7e:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <xTaskIncrementTick+0x144>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 808e 	bne.w	80040a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f88:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <xTaskIncrementTick+0x148>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f90:	4a4a      	ldr	r2, [pc, #296]	; (80040bc <xTaskIncrementTick+0x148>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d120      	bne.n	8003fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f9c:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <xTaskIncrementTick+0x14c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <xTaskIncrementTick+0x48>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	603b      	str	r3, [r7, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xTaskIncrementTick+0x46>
 8003fbc:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <xTaskIncrementTick+0x14c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <xTaskIncrementTick+0x150>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3e      	ldr	r2, [pc, #248]	; (80040c0 <xTaskIncrementTick+0x14c>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4a3e      	ldr	r2, [pc, #248]	; (80040c4 <xTaskIncrementTick+0x150>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <xTaskIncrementTick+0x154>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <xTaskIncrementTick+0x154>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	f000 fa9f 	bl	800451c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <xTaskIncrementTick+0x158>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d348      	bcc.n	800407a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <xTaskIncrementTick+0x14c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff2:	4b36      	ldr	r3, [pc, #216]	; (80040cc <xTaskIncrementTick+0x158>)
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	601a      	str	r2, [r3, #0]
					break;
 8003ffa:	e03e      	b.n	800407a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffc:	4b30      	ldr	r3, [pc, #192]	; (80040c0 <xTaskIncrementTick+0x14c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d203      	bcs.n	800401c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <xTaskIncrementTick+0x158>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800401a:	e02e      	b.n	800407a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f90d 	bl	8003240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3318      	adds	r3, #24
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff f904 	bl	8003240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <xTaskIncrementTick+0x15c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <xTaskIncrementTick+0x15c>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <xTaskIncrementTick+0x160>)
 8004058:	441a      	add	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7ff f890 	bl	8003186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <xTaskIncrementTick+0x164>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	429a      	cmp	r2, r3
 8004072:	d3b9      	bcc.n	8003fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004078:	e7b6      	b.n	8003fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <xTaskIncrementTick+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4914      	ldr	r1, [pc, #80]	; (80040d4 <xTaskIncrementTick+0x160>)
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d901      	bls.n	8004096 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <xTaskIncrementTick+0x168>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e004      	b.n	80040ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <xTaskIncrementTick+0x16c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <xTaskIncrementTick+0x16c>)
 80040ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040ae:	697b      	ldr	r3, [r7, #20]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200003bc 	.word	0x200003bc
 80040bc:	20000398 	.word	0x20000398
 80040c0:	2000034c 	.word	0x2000034c
 80040c4:	20000350 	.word	0x20000350
 80040c8:	200003ac 	.word	0x200003ac
 80040cc:	200003b4 	.word	0x200003b4
 80040d0:	2000039c 	.word	0x2000039c
 80040d4:	20000298 	.word	0x20000298
 80040d8:	20000294 	.word	0x20000294
 80040dc:	200003a8 	.word	0x200003a8
 80040e0:	200003a4 	.word	0x200003a4

080040e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <vTaskSwitchContext+0xa4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <vTaskSwitchContext+0xa8>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040f8:	e03f      	b.n	800417a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <vTaskSwitchContext+0xa8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <vTaskSwitchContext+0xac>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	f1c3 031f 	rsb	r3, r3, #31
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	491f      	ldr	r1, [pc, #124]	; (8004194 <vTaskSwitchContext+0xb0>)
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <vTaskSwitchContext+0x5c>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	607b      	str	r3, [r7, #4]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <vTaskSwitchContext+0x5a>
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <vTaskSwitchContext+0xb0>)
 800414c:	4413      	add	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3308      	adds	r3, #8
 8004162:	429a      	cmp	r2, r3
 8004164:	d104      	bne.n	8004170 <vTaskSwitchContext+0x8c>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <vTaskSwitchContext+0xb4>)
 8004178:	6013      	str	r3, [r2, #0]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	200003bc 	.word	0x200003bc
 800418c:	200003a8 	.word	0x200003a8
 8004190:	2000039c 	.word	0x2000039c
 8004194:	20000298 	.word	0x20000298
 8004198:	20000294 	.word	0x20000294

0800419c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	60fb      	str	r3, [r7, #12]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <vTaskPlaceOnEventList+0x44>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3318      	adds	r3, #24
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fe ffff 	bl	80031ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041d0:	2101      	movs	r1, #1
 80041d2:	6838      	ldr	r0, [r7, #0]
 80041d4:	f000 faf8 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000294 	.word	0x20000294

080041e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60fb      	str	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f813 	bl	8003240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <xTaskRemoveFromEventList+0xac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11c      	bne.n	800425c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3304      	adds	r3, #4
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f80a 	bl	8003240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2201      	movs	r2, #1
 8004232:	409a      	lsls	r2, r3
 8004234:	4b17      	ldr	r3, [pc, #92]	; (8004294 <xTaskRemoveFromEventList+0xb0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <xTaskRemoveFromEventList+0xb0>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <xTaskRemoveFromEventList+0xb4>)
 800424c:	441a      	add	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe ff96 	bl	8003186 <vListInsertEnd>
 800425a:	e005      	b.n	8004268 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3318      	adds	r3, #24
 8004260:	4619      	mov	r1, r3
 8004262:	480e      	ldr	r0, [pc, #56]	; (800429c <xTaskRemoveFromEventList+0xb8>)
 8004264:	f7fe ff8f 	bl	8003186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <xTaskRemoveFromEventList+0xbc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	429a      	cmp	r2, r3
 8004274:	d905      	bls.n	8004282 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <xTaskRemoveFromEventList+0xc0>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e001      	b.n	8004286 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004286:	697b      	ldr	r3, [r7, #20]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200003bc 	.word	0x200003bc
 8004294:	2000039c 	.word	0x2000039c
 8004298:	20000298 	.word	0x20000298
 800429c:	20000354 	.word	0x20000354
 80042a0:	20000294 	.word	0x20000294
 80042a4:	200003a8 	.word	0x200003a8

080042a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <vTaskInternalSetTimeOutState+0x24>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <vTaskInternalSetTimeOutState+0x28>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	200003ac 	.word	0x200003ac
 80042d0:	20000398 	.word	0x20000398

080042d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
}
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004316:	f000 fbed 	bl	8004af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <xTaskCheckForTimeOut+0xbc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d102      	bne.n	800433a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e023      	b.n	8004382 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <xTaskCheckForTimeOut+0xc0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d007      	beq.n	8004356 <xTaskCheckForTimeOut+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e015      	b.n	8004382 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d20b      	bcs.n	8004378 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad2      	subs	r2, r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff9b 	bl	80042a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e004      	b.n	8004382 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800437e:	2301      	movs	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004382:	f000 fbe7 	bl	8004b54 <vPortExitCritical>

	return xReturn;
 8004386:	69fb      	ldr	r3, [r7, #28]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000398 	.word	0x20000398
 8004394:	200003ac 	.word	0x200003ac

08004398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <vTaskMissedYield+0x14>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	200003a8 	.word	0x200003a8

080043b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043b8:	f000 f852 	bl	8004460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <prvIdleTask+0x28>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d9f9      	bls.n	80043b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <prvIdleTask+0x2c>)
 80043c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043d4:	e7f0      	b.n	80043b8 <prvIdleTask+0x8>
 80043d6:	bf00      	nop
 80043d8:	20000298 	.word	0x20000298
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e00c      	b.n	8004406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <prvInitialiseTaskLists+0x60>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fe96 	bl	800312c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3301      	adds	r3, #1
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b06      	cmp	r3, #6
 800440a:	d9ef      	bls.n	80043ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800440c:	480d      	ldr	r0, [pc, #52]	; (8004444 <prvInitialiseTaskLists+0x64>)
 800440e:	f7fe fe8d 	bl	800312c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004412:	480d      	ldr	r0, [pc, #52]	; (8004448 <prvInitialiseTaskLists+0x68>)
 8004414:	f7fe fe8a 	bl	800312c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004418:	480c      	ldr	r0, [pc, #48]	; (800444c <prvInitialiseTaskLists+0x6c>)
 800441a:	f7fe fe87 	bl	800312c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800441e:	480c      	ldr	r0, [pc, #48]	; (8004450 <prvInitialiseTaskLists+0x70>)
 8004420:	f7fe fe84 	bl	800312c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004424:	480b      	ldr	r0, [pc, #44]	; (8004454 <prvInitialiseTaskLists+0x74>)
 8004426:	f7fe fe81 	bl	800312c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <prvInitialiseTaskLists+0x78>)
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <prvInitialiseTaskLists+0x64>)
 800442e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvInitialiseTaskLists+0x7c>)
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <prvInitialiseTaskLists+0x68>)
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000298 	.word	0x20000298
 8004444:	20000324 	.word	0x20000324
 8004448:	20000338 	.word	0x20000338
 800444c:	20000354 	.word	0x20000354
 8004450:	20000368 	.word	0x20000368
 8004454:	20000380 	.word	0x20000380
 8004458:	2000034c 	.word	0x2000034c
 800445c:	20000350 	.word	0x20000350

08004460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004466:	e019      	b.n	800449c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004468:	f000 fb44 	bl	8004af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <prvCheckTasksWaitingTermination+0x50>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fee1 	bl	8003240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <prvCheckTasksWaitingTermination+0x54>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3b01      	subs	r3, #1
 8004484:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <prvCheckTasksWaitingTermination+0x54>)
 8004486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 8004490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004492:	f000 fb5f 	bl	8004b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f810 	bl	80044bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e1      	bne.n	8004468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000368 	.word	0x20000368
 80044b4:	20000394 	.word	0x20000394
 80044b8:	2000037c 	.word	0x2000037c

080044bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fcfc 	bl	8004ed0 <vPortFree>
				vPortFree( pxTCB );
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fcf9 	bl	8004ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044de:	e018      	b.n	8004512 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d103      	bne.n	80044f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fcf0 	bl	8004ed0 <vPortFree>
	}
 80044f0:	e00f      	b.n	8004512 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d00a      	beq.n	8004512 <prvDeleteTCB+0x56>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60fb      	str	r3, [r7, #12]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <prvDeleteTCB+0x54>
	}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <prvResetNextTaskUnblockTime+0x38>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <prvResetNextTaskUnblockTime+0x3c>)
 800452e:	f04f 32ff 	mov.w	r2, #4294967295
 8004532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004534:	e008      	b.n	8004548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvResetNextTaskUnblockTime+0x38>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <prvResetNextTaskUnblockTime+0x3c>)
 8004546:	6013      	str	r3, [r2, #0]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	2000034c 	.word	0x2000034c
 8004558:	200003b4 	.word	0x200003b4

0800455c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <xTaskGetSchedulerState+0x34>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800456a:	2301      	movs	r3, #1
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	e008      	b.n	8004582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <xTaskGetSchedulerState+0x38>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004578:	2302      	movs	r3, #2
 800457a:	607b      	str	r3, [r7, #4]
 800457c:	e001      	b.n	8004582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800457e:	2300      	movs	r3, #0
 8004580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004582:	687b      	ldr	r3, [r7, #4]
	}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	200003a0 	.word	0x200003a0
 8004594:	200003bc 	.word	0x200003bc

08004598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d05e      	beq.n	800466c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <xTaskPriorityInherit+0xe0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d24e      	bcs.n	800465a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db06      	blt.n	80045d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <xTaskPriorityInherit+0xe0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f1c3 0207 	rsb	r2, r3, #7
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6959      	ldr	r1, [r3, #20]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4a26      	ldr	r2, [pc, #152]	; (800467c <xTaskPriorityInherit+0xe4>)
 80045e4:	4413      	add	r3, r2
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d12f      	bne.n	800464a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fe26 	bl	8003240 <uxListRemove>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43da      	mvns	r2, r3
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <xTaskPriorityInherit+0xe8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4013      	ands	r3, r2
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <xTaskPriorityInherit+0xe8>)
 800460e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <xTaskPriorityInherit+0xe0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	2201      	movs	r2, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <xTaskPriorityInherit+0xe8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <xTaskPriorityInherit+0xe8>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a10      	ldr	r2, [pc, #64]	; (800467c <xTaskPriorityInherit+0xe4>)
 800463a:	441a      	add	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7fe fd9f 	bl	8003186 <vListInsertEnd>
 8004648:	e004      	b.n	8004654 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <xTaskPriorityInherit+0xe0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e008      	b.n	800466c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <xTaskPriorityInherit+0xe0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	429a      	cmp	r2, r3
 8004666:	d201      	bcs.n	800466c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800466c:	68fb      	ldr	r3, [r7, #12]
	}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000294 	.word	0x20000294
 800467c:	20000298 	.word	0x20000298
 8004680:	2000039c 	.word	0x2000039c

08004684 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d077      	beq.n	800478c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d902      	bls.n	80046ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e002      	b.n	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d058      	beq.n	800478c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d153      	bne.n	800478c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d10a      	bne.n	8004704 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60bb      	str	r3, [r7, #8]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db04      	blt.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0207 	rsb	r2, r3, #7
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6959      	ldr	r1, [r3, #20]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004732:	4413      	add	r3, r2
 8004734:	4299      	cmp	r1, r3
 8004736:	d129      	bne.n	800478c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3304      	adds	r3, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fd7f 	bl	8003240 <uxListRemove>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2201      	movs	r2, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4013      	ands	r3, r2
 800475a:	4a10      	ldr	r2, [pc, #64]	; (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800475c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a06      	ldr	r2, [pc, #24]	; (8004798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800477e:	441a      	add	r2, r3
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fcfd 	bl	8003186 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800478c:	bf00      	nop
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000294 	.word	0x20000294
 8004798:	20000298 	.word	0x20000298
 800479c:	2000039c 	.word	0x2000039c

080047a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b2:	3201      	adds	r2, #1
 80047b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80047b6:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047b8:	681b      	ldr	r3, [r3, #0]
	}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000294 	.word	0x20000294

080047c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fd2e 	bl	8003240 <uxListRemove>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2201      	movs	r2, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	4a20      	ldr	r2, [pc, #128]	; (8004880 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004800:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d10a      	bne.n	8004820 <prvAddCurrentTaskToDelayedList+0x58>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	481a      	ldr	r0, [pc, #104]	; (8004884 <prvAddCurrentTaskToDelayedList+0xbc>)
 800481a:	f7fe fcb4 	bl	8003186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800481e:	e026      	b.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d209      	bcs.n	800484c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe fcc2 	bl	80031ce <vListInsert>
}
 800484a:	e010      	b.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <prvAddCurrentTaskToDelayedList+0xc4>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fe fcb8 	bl	80031ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d202      	bcs.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <prvAddCurrentTaskToDelayedList+0xc8>)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000398 	.word	0x20000398
 800487c:	20000294 	.word	0x20000294
 8004880:	2000039c 	.word	0x2000039c
 8004884:	20000380 	.word	0x20000380
 8004888:	20000350 	.word	0x20000350
 800488c:	2000034c 	.word	0x2000034c
 8004890:	200003b4 	.word	0x200003b4

08004894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b04      	subs	r3, #4
 80048a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b04      	subs	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3b04      	subs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <pxPortInitialiseStack+0x64>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b14      	subs	r3, #20
 80048ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f06f 0202 	mvn.w	r2, #2
 80048e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b20      	subs	r3, #32
 80048e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	080048fd 	.word	0x080048fd

080048fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <prvTaskExitError+0x54>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d00a      	beq.n	8004926 <prvTaskExitError+0x2a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <prvTaskExitError+0x28>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60bb      	str	r3, [r7, #8]
}
 8004938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800493a:	bf00      	nop
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0fc      	beq.n	800493c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000018 	.word	0x20000018
	...

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	bf00      	nop
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049b6:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a46      	ldr	r2, [pc, #280]	; (8004ad4 <xPortStartScheduler+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10a      	bne.n	80049d6 <xPortStartScheduler+0x26>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049d6:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <xPortStartScheduler+0x128>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x46>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <xPortStartScheduler+0x12c>)
 80049f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <xPortStartScheduler+0x130>)
 8004a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a24:	e009      	b.n	8004a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d0ef      	beq.n	8004a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00a      	beq.n	8004a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60bb      	str	r3, [r7, #8]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a9e:	f000 f8dd 	bl	8004c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <xPortStartScheduler+0x13c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aa8:	f000 f8fc 	bl	8004ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <xPortStartScheduler+0x140>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <xPortStartScheduler+0x140>)
 8004ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ab8:	f7ff ff66 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004abc:	f7ff fb12 	bl	80040e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004ac0:	f7ff ff1c 	bl	80048fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000ed00 	.word	0xe000ed00
 8004ad4:	410fc271 	.word	0x410fc271
 8004ad8:	410fc270 	.word	0x410fc270
 8004adc:	e000e400 	.word	0xe000e400
 8004ae0:	200003c0 	.word	0x200003c0
 8004ae4:	200003c4 	.word	0x200003c4
 8004ae8:	e000ed20 	.word	0xe000ed20
 8004aec:	20000018 	.word	0x20000018
 8004af0:	e000ef34 	.word	0xe000ef34

08004af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10f      	bne.n	8004b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortEnterCritical+0x5c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	603b      	str	r3, [r7, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vPortEnterCritical+0x4a>
	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000018 	.word	0x20000018
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <vPortExitCritical+0x24>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <vPortExitCritical+0x42>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f383 8811 	msr	BASEPRI, r3
}
 8004b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000018 	.word	0x20000018
	...

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f01e 0f10 	tst.w	lr, #16
 8004bc0:	bf08      	it	eq
 8004bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bd4:	f380 8811 	msr	BASEPRI, r0
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f7ff fa80 	bl	80040e4 <vTaskSwitchContext>
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f380 8811 	msr	BASEPRI, r0
 8004bec:	bc09      	pop	{r0, r3}
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	6808      	ldr	r0, [r1, #0]
 8004bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	f01e 0f10 	tst.w	lr, #16
 8004bfa:	bf08      	it	eq
 8004bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c00:	f380 8809 	msr	PSP, r0
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst>:
 8004c10:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c32:	f7ff f99f 	bl	8003f74 <xTaskIncrementTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <SysTick_Handler+0x40>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <vPortSetupTimerInterrupt+0x38>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <vPortSetupTimerInterrupt+0x3c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <vPortSetupTimerInterrupt+0x40>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <vPortSetupTimerInterrupt+0x44>)
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010
 8004c94:	e000e018 	.word	0xe000e018
 8004c98:	2000000c 	.word	0x2000000c
 8004c9c:	10624dd3 	.word	0x10624dd3
 8004ca0:	e000e014 	.word	0xe000e014

08004ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cb4 <vPortEnableVFP+0x10>
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cae:	6001      	str	r1, [r0, #0]
 8004cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed88 	.word	0xe000ed88

08004cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d914      	bls.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <vPortValidateInterruptPriority+0x70>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <vPortValidateInterruptPriority+0x74>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7afa      	ldrb	r2, [r7, #11]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20a      	bcs.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <vPortValidateInterruptPriority+0x78>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <vPortValidateInterruptPriority+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d90a      	bls.n	8004d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	603b      	str	r3, [r7, #0]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <vPortValidateInterruptPriority+0x60>
	}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e3f0 	.word	0xe000e3f0
 8004d2c:	200003c0 	.word	0x200003c0
 8004d30:	e000ed0c 	.word	0xe000ed0c
 8004d34:	200003c4 	.word	0x200003c4

08004d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d44:	f7ff f86c 	bl	8003e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d48:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <pvPortMalloc+0x180>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d50:	f000 f920 	bl	8004f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <pvPortMalloc+0x184>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8093 	bne.w	8004e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d68:	2208      	movs	r2, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <pvPortMalloc+0x6c>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06e      	beq.n	8004e88 <pvPortMalloc+0x150>
 8004daa:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <pvPortMalloc+0x188>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d869      	bhi.n	8004e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004db4:	4b43      	ldr	r3, [pc, #268]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004db8:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dbe:	e004      	b.n	8004dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d903      	bls.n	8004ddc <pvPortMalloc+0xa4>
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f1      	bne.n	8004dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ddc:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <pvPortMalloc+0x180>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d050      	beq.n	8004e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2208      	movs	r2, #8
 8004dec:	4413      	add	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	2308      	movs	r3, #8
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d91f      	bls.n	8004e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <pvPortMalloc+0xf8>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	613b      	str	r3, [r7, #16]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f000 f908 	bl	8005058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e48:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d203      	bcs.n	8004e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <pvPortMalloc+0x184>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <pvPortMalloc+0x194>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <pvPortMalloc+0x194>)
 8004e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e88:	f7fe ffd8 	bl	8003e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <pvPortMalloc+0x174>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <pvPortMalloc+0x172>
	return pvReturn;
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20003fd0 	.word	0x20003fd0
 8004ebc:	20003fe4 	.word	0x20003fe4
 8004ec0:	20003fd4 	.word	0x20003fd4
 8004ec4:	20003fc8 	.word	0x20003fc8
 8004ec8:	20003fd8 	.word	0x20003fd8
 8004ecc:	20003fdc 	.word	0x20003fdc

08004ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04d      	beq.n	8004f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <vPortFree+0xb8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vPortFree+0x44>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	60fb      	str	r3, [r7, #12]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <vPortFree+0x62>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60bb      	str	r3, [r7, #8]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <vPortFree+0xb8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <vPortFree+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f58:	f7fe ff62 	bl	8003e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <vPortFree+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <vPortFree+0xbc>)
 8004f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f000 f874 	bl	8005058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vPortFree+0xc0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vPortFree+0xc0>)
 8004f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f7a:	f7fe ff5f 	bl	8003e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20003fe4 	.word	0x20003fe4
 8004f8c:	20003fd4 	.word	0x20003fd4
 8004f90:	20003fe0 	.word	0x20003fe0

08004f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvHeapInit+0xac>)
 8004fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <prvHeapInit+0xac>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <prvHeapInit+0xb0>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <prvHeapInit+0xb0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <prvHeapInit+0xb4>)
 8004ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <prvHeapInit+0xb4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvHeapInit+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <prvHeapInit+0xb4>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <prvHeapInit+0xb8>)
 8005022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvHeapInit+0xbc>)
 800502a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvHeapInit+0xc0>)
 800502e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200003c8 	.word	0x200003c8
 8005044:	20003fc8 	.word	0x20003fc8
 8005048:	20003fd0 	.word	0x20003fd0
 800504c:	20003fd8 	.word	0x20003fd8
 8005050:	20003fd4 	.word	0x20003fd4
 8005054:	20003fe4 	.word	0x20003fe4

08005058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvInsertBlockIntoFreeList+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e002      	b.n	800506c <prvInsertBlockIntoFreeList+0x14>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d8f7      	bhi.n	8005066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d108      	bne.n	800509a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d118      	bne.n	80050e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d00d      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e003      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20003fc8 	.word	0x20003fc8
 8005108:	20003fd0 	.word	0x20003fd0

0800510c <__libc_init_array>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4d0d      	ldr	r5, [pc, #52]	; (8005144 <__libc_init_array+0x38>)
 8005110:	4c0d      	ldr	r4, [pc, #52]	; (8005148 <__libc_init_array+0x3c>)
 8005112:	1b64      	subs	r4, r4, r5
 8005114:	10a4      	asrs	r4, r4, #2
 8005116:	2600      	movs	r6, #0
 8005118:	42a6      	cmp	r6, r4
 800511a:	d109      	bne.n	8005130 <__libc_init_array+0x24>
 800511c:	4d0b      	ldr	r5, [pc, #44]	; (800514c <__libc_init_array+0x40>)
 800511e:	4c0c      	ldr	r4, [pc, #48]	; (8005150 <__libc_init_array+0x44>)
 8005120:	f000 f88c 	bl	800523c <_init>
 8005124:	1b64      	subs	r4, r4, r5
 8005126:	10a4      	asrs	r4, r4, #2
 8005128:	2600      	movs	r6, #0
 800512a:	42a6      	cmp	r6, r4
 800512c:	d105      	bne.n	800513a <__libc_init_array+0x2e>
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	f855 3b04 	ldr.w	r3, [r5], #4
 8005134:	4798      	blx	r3
 8005136:	3601      	adds	r6, #1
 8005138:	e7ee      	b.n	8005118 <__libc_init_array+0xc>
 800513a:	f855 3b04 	ldr.w	r3, [r5], #4
 800513e:	4798      	blx	r3
 8005140:	3601      	adds	r6, #1
 8005142:	e7f2      	b.n	800512a <__libc_init_array+0x1e>
 8005144:	0800549c 	.word	0x0800549c
 8005148:	0800549c 	.word	0x0800549c
 800514c:	0800549c 	.word	0x0800549c
 8005150:	080054a0 	.word	0x080054a0

08005154 <__itoa>:
 8005154:	1e93      	subs	r3, r2, #2
 8005156:	2b22      	cmp	r3, #34	; 0x22
 8005158:	b510      	push	{r4, lr}
 800515a:	460c      	mov	r4, r1
 800515c:	d904      	bls.n	8005168 <__itoa+0x14>
 800515e:	2300      	movs	r3, #0
 8005160:	700b      	strb	r3, [r1, #0]
 8005162:	461c      	mov	r4, r3
 8005164:	4620      	mov	r0, r4
 8005166:	bd10      	pop	{r4, pc}
 8005168:	2a0a      	cmp	r2, #10
 800516a:	d109      	bne.n	8005180 <__itoa+0x2c>
 800516c:	2800      	cmp	r0, #0
 800516e:	da07      	bge.n	8005180 <__itoa+0x2c>
 8005170:	232d      	movs	r3, #45	; 0x2d
 8005172:	700b      	strb	r3, [r1, #0]
 8005174:	4240      	negs	r0, r0
 8005176:	2101      	movs	r1, #1
 8005178:	4421      	add	r1, r4
 800517a:	f000 f81d 	bl	80051b8 <__utoa>
 800517e:	e7f1      	b.n	8005164 <__itoa+0x10>
 8005180:	2100      	movs	r1, #0
 8005182:	e7f9      	b.n	8005178 <__itoa+0x24>

08005184 <itoa>:
 8005184:	f7ff bfe6 	b.w	8005154 <__itoa>

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <strcat>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4602      	mov	r2, r0
 800519c:	7814      	ldrb	r4, [r2, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	3201      	adds	r2, #1
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d1fa      	bne.n	800519c <strcat+0x4>
 80051a6:	3b01      	subs	r3, #1
 80051a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d1f9      	bne.n	80051a8 <strcat+0x10>
 80051b4:	bd10      	pop	{r4, pc}
	...

080051b8 <__utoa>:
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	4c1f      	ldr	r4, [pc, #124]	; (8005238 <__utoa+0x80>)
 80051bc:	b08b      	sub	sp, #44	; 0x2c
 80051be:	4605      	mov	r5, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	466e      	mov	r6, sp
 80051c4:	f104 0c20 	add.w	ip, r4, #32
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	6861      	ldr	r1, [r4, #4]
 80051cc:	4637      	mov	r7, r6
 80051ce:	c703      	stmia	r7!, {r0, r1}
 80051d0:	3408      	adds	r4, #8
 80051d2:	4564      	cmp	r4, ip
 80051d4:	463e      	mov	r6, r7
 80051d6:	d1f7      	bne.n	80051c8 <__utoa+0x10>
 80051d8:	7921      	ldrb	r1, [r4, #4]
 80051da:	7139      	strb	r1, [r7, #4]
 80051dc:	1e91      	subs	r1, r2, #2
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	6038      	str	r0, [r7, #0]
 80051e2:	2922      	cmp	r1, #34	; 0x22
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	d904      	bls.n	80051f4 <__utoa+0x3c>
 80051ea:	7019      	strb	r1, [r3, #0]
 80051ec:	460b      	mov	r3, r1
 80051ee:	4618      	mov	r0, r3
 80051f0:	b00b      	add	sp, #44	; 0x2c
 80051f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f4:	1e58      	subs	r0, r3, #1
 80051f6:	4684      	mov	ip, r0
 80051f8:	fbb5 f7f2 	udiv	r7, r5, r2
 80051fc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005200:	fb02 5617 	mls	r6, r2, r7, r5
 8005204:	4476      	add	r6, lr
 8005206:	460c      	mov	r4, r1
 8005208:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800520c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005210:	462e      	mov	r6, r5
 8005212:	42b2      	cmp	r2, r6
 8005214:	f101 0101 	add.w	r1, r1, #1
 8005218:	463d      	mov	r5, r7
 800521a:	d9ed      	bls.n	80051f8 <__utoa+0x40>
 800521c:	2200      	movs	r2, #0
 800521e:	545a      	strb	r2, [r3, r1]
 8005220:	1919      	adds	r1, r3, r4
 8005222:	1aa5      	subs	r5, r4, r2
 8005224:	42aa      	cmp	r2, r5
 8005226:	dae2      	bge.n	80051ee <__utoa+0x36>
 8005228:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800522c:	780e      	ldrb	r6, [r1, #0]
 800522e:	7006      	strb	r6, [r0, #0]
 8005230:	3201      	adds	r2, #1
 8005232:	f801 5901 	strb.w	r5, [r1], #-1
 8005236:	e7f4      	b.n	8005222 <__utoa+0x6a>
 8005238:	0800546c 	.word	0x0800546c

0800523c <_init>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	bf00      	nop
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr

08005248 <_fini>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr
